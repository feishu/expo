{"version":3,"file":"ExpoImage.js","sourceRoot":"","sources":["../src/ExpoImage.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,sBAAsB,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAInF,MAAM,eAAe,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;AAE5D,MAAM,CAAC,OAAO,UAAU,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,EAAc;IACvE,MAAM,cAAc,GAAG,KAAK,CAAC,kBAAkB,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;IAC9D,IAAI,aAAa,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAEhD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;QAClC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC;QACzC,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,IAAI,KAAK,CAAC;QACnD,aAAa,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,IAAI,MAAM,CAAC;KACvD;IAED,kDAAkD;IAClD,iDAAiD;IACjD,6CAA6C;IAC7C,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;QAC7B,OAAO,aAAa,CAAC,WAAW,CAAC;QACjC,OAAO,aAAa,CAAC,YAAY,CAAC;QAClC,OAAO,aAAa,CAAC,aAAa,CAAC;QACnC,OAAO,aAAa,CAAC,YAAY,CAAC;QAClC,UAAU,GAAG,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC;KACxC;SAAM;QACL,OAAO,aAAa,CAAC,SAAS,CAAC;QAC/B,UAAU,GAAG,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC;KAC1C;IAED,kEAAkE;IAClE,wEAAwE;IACxE,2EAA2E;IAC3E,8DAA8D;IAC9D,gFAAgF;IAChF,8EAA8E;IAC9E,iFAAiF;IACjF,IAAI,UAAU,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE;QAChD,OAAO,CAAC,IAAI,CACV,+JAA+J,CAChK,CAAC;QACF,6EAA6E;KAC9E;IAED,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,EAAG,CAAC;AACtF,CAAC","sourcesContent":["import React from 'react';\nimport { Image, requireNativeComponent, StyleSheet, Platform } from 'react-native';\n\nimport { ImageProps } from './Image';\n\nconst NativeExpoImage = requireNativeComponent('ExpoImage');\n\nexport default function ExpoImage({ source, style, ...props }: ImageProps) {\n  const resolvedSource = Image.resolveAssetSource(source ?? {});\n  let resolvedStyle = StyleSheet.flatten([style]);\n\n  if (!Array.isArray(resolvedSource)) {\n    const { width, height } = resolvedSource;\n    resolvedStyle.width = resolvedStyle.width ?? width;\n    resolvedStyle.height = resolvedStyle.height ?? height;\n  }\n\n  // Shadows behave different on iOS, Android & Web.\n  // Android uses the `elevation` prop, whereas iOS\n  // and web use the regular `shadow...` props.\n  let hasShadows = false;\n  if (Platform.OS === 'android') {\n    delete resolvedStyle.shadowColor;\n    delete resolvedStyle.shadowOffset;\n    delete resolvedStyle.shadowOpacity;\n    delete resolvedStyle.shadowRadius;\n    hasShadows = !!resolvedStyle.elevation;\n  } else {\n    delete resolvedStyle.elevation;\n    hasShadows = !!resolvedStyle.shadowColor;\n  }\n\n  // Shadows are rendered quite differently on iOS, Android and web.\n  // - iOS renders the shadow along the transparent contours of the image.\n  // - Android renders an underlay which extends to the inside of the bounds.\n  // - Web renders the shadow only on the outside of the bounds.\n  // To achieve a consistent appearance on all platforms, it is highly recommended\n  // to set a background-color on the Image when using shadows. This will ensure\n  // consistent rendering on all platforms and mitigate Androids drawing artefacts.\n  if (hasShadows && !resolvedStyle.backgroundColor) {\n    console.warn(\n      `\"expo-image\" Shadows may not be rendered correctly for the transparent parts of images. Set \"backgroundColor\" to a non-transparent color when using a shadow.`\n    );\n    // To silence this warning, set background-color to a fully transparent color\n  }\n\n  return <NativeExpoImage {...props} source={resolvedSource} style={resolvedStyle} />;\n}\n"]}